Name
----
cvc2git - Use git to manage conary package:source

SYNOPSIS
--------
cvc2git
cvc2git command [args]

DESCRIPTION
-----------
cvc2git is a small program to convert a conary package:source to a local git
repository.

OPTIONS
-------
Available commands are clone, pull, or <empty-command> (i.e. no command).

    <no-command>
        Convert current directory into a git repository. When cvc2git is run
        without any command, it assumes current directory to be a conary source
        package, and convert it into git repository.

    clone <package-fullversion> [<directory>]
        Pull a conary package into a new directory.  Aliases: checkout, co

        <package-fullversion>
            Package name with label, as returned by 'conary q --full-versions'.
            Example: pkg=foresight.rpath.org@fl:2-devel or
                     pkg:source=foresight.rpath.org@fl:2-devel.
        <directory>
            The name of a new directory to clone into. If not specified, the
            package name is used.

    pull
        Update a local clone to latest revision. This must be run from within
        an existing repository (created with cvc2git clone).  Aliases: update

IMPLEMENTATION
--------------
Got quite stuck on the hg-cvc tool, so I started this one.

About 'cvc2git clone':
    * Checkout the source package (cvc co <package>)
    * Get the package history (cvc log)
    * Parse the history
    * Init a git repository (git init)
    * Check out the first revision of the package (cvc update <revision>)
    * Commit the first revision to git (git add; git commit)
    * Checking out the next revision, on and on.

You probably already realize from this simple implementation that, cvc2git is
quite slow.

EXAMPLES
--------
$ python cvc2git monodevelop=foresight.rpath.org@fl:2-devel

Checkout monodevelop:source and put it in the ./monodevelop directory.

$ python cvc2git avr-binutils=/jesse.rpath.org@fl:2-devel test

Checkout avr-binutils from my personal repository into ./test.
